buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
 
version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'forcesofreality'
 
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
 
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
  maven {
    // location of the maven that hosts JEI files
		url "http://dvs1.progwml6.com/files/maven"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    url  "https://modmaven.k-4u.nl"
  }

}


minecraft {
	mappings channel: 'snapshot', version: '20201028-1.16.3'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
 
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
 
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
 
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
 
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
 
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
 	    args '--mod', 'forcesofreality', '--all',
		'--existing', file('src/main/resources').toString(),
		'--existing', file('src/generated/resources').toString(),
		'--output', file('src/generated/resources/')



            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { 
	srcDir 'src/generated/resources' 
}

dependencies {
   
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.37'
   compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.64:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.64")
 
}
 
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
 
 
jar.finalizedBy('reobfJar') 
 
publishing {
    tasks.publish.dependsOn 'build'
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }

    }
}